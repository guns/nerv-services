#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'set'
require 'etc'
require 'yaml'
require 'pathname'

class Usertmpfiles
  DEFAULTS = {
    :tmpdir => 'tmp',
    :config_file => '/etc/usertmpfiles.yml',
    :remove_links => false,
    :users => nil,
    :list => false,
    :noop => false,
    :verbose => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts[k] || DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Move user files to a temporary directory.

        The --tmpdir and --users options can also be specified under the
        tmpdir: and users: entries in the configuration file.

        Usage: #{File.basename __FILE__} [options]

        Options:
      BANNER

      opt.on '-d', '--tmpdir PATH', 'tmpdir path, relative to HOME [DEFAULT: %s]' % DEFAULTS[:tmpdir] do |arg|
        @tmpdir = arg
      end

      opt.on '-f', '--config-file PATH', '[DEFAULT: %s]' % DEFAULTS[:config_file] do |arg|
        @config_file = File.expand_path arg
      end

      opt.on '-r', '--remove-links', 'Remove symlinks to tmpdir' do
        @remove_links = true
      end

      opt.on '-u', '--users A,B,C', Array do |arg|
        @users = Set.new arg
      end

      opt.on '-l', '--list' do
        @list = true
      end

      opt.on '-n', '--noop' do
        @noop = true
      end

      opt.on '-v', '--verbose' do
        @verbose = true
      end
    end
  end

  def tilde_expand_path path, home
    File.expand_path path.sub(%r{\A~(/.*)?}, "#{home}\\1")
  end

  def config
    @config ||= YAML.load_file(@config_file || DEFAULTS[:config_file])
  end

  def tmpfiles home
    Hash[config.select { |(k, _)| k == 'directory' || k == 'file' }.map do |type, files|
      fs = files.flat_map do |f|
        if f =~ /\Aglob:(.+)/
          glob, pat = $1.split ':', 2
          regex = Regexp.compile pat if pat
          xs = Dir.glob(tilde_expand_path glob, home)
          xs.select! { |f| f =~ regex } if regex
          xs.select! { |f| [type, 'link'].include? File.ftype(f) }
          xs
        else
          tilde_expand_path f, home
        end
      end
      [type, Set.new(fs)]
    end]
  end

  def users
    (@users || config['users'] || [Process.euid]).map do |u|
      begin
        u.is_a?(Integer) ? Etc.getpwuid(u) : Etc.getpwnam(u)
      rescue ArgumentError
        warn "Ignoring unknown user #{u.inspect}"
      end
    end.compact
  end

  def list_tmpfiles
    users.each do |u|
      puts "#{u.name}:"
      tmpfiles(u.dir).each do |type, files|
        puts "  #{type}:"
        puts files.select { |f| File.exists? f }.sort.map { |f| '    ' << f }
      end
    end
  end

  def tmpdir home
    File.join home, @tmpdir || config['tmpdir'] || DEFAULTS[:tmpdir]
  end

  def tmpsrc home, old_src
    File.expand_path File.join(tmpdir(home), old_src.sub(%r{\A#{Regexp.escape home}/}, ''))
  end

  def fopts
    { :verbose => !!@verbose, :noop => !!@noop }
  end

  def relative_path src, dst
    Pathname.new(src).relative_path_from(Pathname.new File.dirname(dst)).to_s
  end

  def readlink dst
    File.expand_path File.readlink(dst), File.dirname(dst)
  end

  def move_tmpfiles home
    Process.wait fork {
      File.umask 0077

      tmpfiles(home).each do |type, fs|
        fs.each do |dst|
          dst = File.expand_path dst
          src = tmpsrc home, dst

          next if File.symlink? dst and readlink(dst) == src and File.exists? src

          FileUtils.mkdir_p File.dirname(src), **fopts

          if File.exists? dst and not File.symlink? dst
            FileUtils.rm_rf src, **fopts
            FileUtils.mv dst, src, **fopts
          else
            FileUtils.rm_rf dst, **fopts
            FileUtils.mkdir_p File.dirname(dst), **fopts
            FileUtils.send (type == 'directory' ? :mkdir_p : :touch), src, **fopts
          end

          relsrc = relative_path src, dst
          puts '%s -> %s' % [dst, relsrc]
          FileUtils.ln_s relsrc, dst, **fopts
        end
      end
    }
  end

  def unlink_tmpfiles home
    tmpfiles(home).each do |_, fs|
      fs.each do |dst|
        if File.symlink? dst and readlink(dst) == tmpsrc(home, dst)
          puts "Removing symlink #{dst}"
          FileUtils.rm dst, **fopts
        end
      end
    end
  end

  def as_user user
    if Process.euid.zero?
      euid, uid, gid = Process.euid, Process.uid, Process.gid
      Process.gid = user.gid
      Process.uid = user.uid
      Process.euid = user.uid
    end
    yield
  ensure
    Process.gid = gid if gid
    Process.uid = uid if uid
    Process.euid = euid if euid
  end

  def with_users
    users.each do |user|
      raise '%s does not exist' % tmpdir(user.dir) unless File.directory? tmpdir(user.dir)
      as_user user do
        yield user
      end
    end
  end

  def setup!
    with_users { |user| move_tmpfiles user.dir }
  end

  def remove_links!
    with_users { |user| unlink_tmpfiles user.dir }
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.empty?

    if @list then list_tmpfiles
    elsif @remove_links then remove_links!
    else setup!
    end
  end
end

$0 = File.basename(__FILE__) and Usertmpfiles.new.run ARGV if $0 == __FILE__
